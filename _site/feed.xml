<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yozi blog</title>
    <description>이것 저것 열심히 살아온 기록을 남기는 용도 입니다.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 31 Dec 2018 22:19:59 +0900</pubDate>
    <lastBuildDate>Mon, 31 Dec 2018 22:19:59 +0900</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>git cherry pick (원하는 커밋 고르기)</title>
        <description>&lt;h1 id=&quot;cherry-pick&quot;&gt;cherry-pick&lt;/h1&gt;

&lt;p&gt;만약 develop에 작업 하였으나, hotfix로 배포해야 할 경우
보통의 나 라면 기존 작업 내역을 돌리고 hotfix를 따서 새로 작업 했으나
해당 커밋만 가져오는 방법이 cherry-pick&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;git log&lt;/em&gt; 를 통해 가져올 커밋 내역을 체크 (ex: f602fb49328857977d5ffe1e4f79c92b5f122448)&lt;/li&gt;
  &lt;li&gt;작업할 feature 혹은 hotfix를 만듬
    &lt;ol&gt;
      &lt;li&gt;&lt;em&gt;git flow hot fix start 1.40.16&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;git checkout hotfix/1.40.16&lt;/em&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;해당 feature 혹은 hotfix 에서  원하는 커밋을 가져오기
    &lt;ol&gt;
      &lt;li&gt;&lt;em&gt;git cherry-pick f602fb49328857977d5ffe1e4f79c92b5f122448&lt;/em&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;git status&lt;/em&gt; 를 통해 동일하게 진행&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 14 Dec 2018 03:00:00 +0900</pubDate>
        <link>http://localhost:4000/git/2018/12/14/git-cherry-pick.html</link>
        <guid isPermaLink="true">http://localhost:4000/git/2018/12/14/git-cherry-pick.html</guid>
        
        <category>git</category>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>라라벨(laravel) 에서 Propel orm 사용하기</title>
        <description>&lt;p&gt;라라벨에선 기본적으로 Eloquent ORM을 지원하지만, 현재 일하는 업무에선 Propel을 사용중이었고, propel 기반의 셋팅중 laravel+propel 관련 한글 자료가 너무 없었고,&lt;/p&gt;

&lt;p&gt;공식 &lt;a href=&quot;https://github.com/propelorm/PropelLaravel&quot;&gt;propelorm/PropelLaravel&lt;/a&gt; 패키지의 문서에 내용과도 현재 라라벨 버전업으로 지원되지 않는 부분들이 있어서, 직접 해보고 경험한 내용 및 설치 순서를 정리 해보려 한다.&lt;/p&gt;

&lt;h3 id=&quot;0-orm-&quot;&gt;0. ORM ?&lt;/h3&gt;
&lt;p&gt;설명 하기전에 ORM에 대해 간단하게 정리해보자면 &lt;strong&gt;object relational mapping&lt;/strong&gt;의 줄임말로 객체 관계 매핑 정도로 해석된다&lt;/p&gt;

&lt;p&gt;즉 데이터베이스를 처리할때 쿼리빌더라 날쿼리를 쓰는게 아니라 객체지향 형태로 구성된 환경에서 쿼리를 처리할수 있는 환경을 뜻할수 있고, 오브젝트로 반환되는 값들을 이용해 연계 처리를 할수있는 등의 형태다&lt;/p&gt;

&lt;p&gt;java 에선 MyBatis, node.js 에서는 MongoDB 가 있다.&lt;/p&gt;

&lt;h3 id=&quot;1-설치&quot;&gt;1. 설치&lt;/h3&gt;
&lt;p&gt;기준은 라라벨 5.5와 Database가 설치되고, 필요 테이블이 만들어진 이후 부터이다.&lt;/p&gt;

&lt;p&gt;현재 &lt;a href=&quot;https://github.com/propelorm/PropelLaravel&quot;&gt;propelorm/PropelLaravel&lt;/a&gt; 의 문서상에 내용대로 진행하고, 설치를 시도 해보면 propel/propel-laravel: “dev-master”이 설치되는대,
이부분은 가장 안정성있는 최신 버전이라고 되어있지만 실제 현재 상황에서 사용해보면 버그가 발생하거나, 초기 설정이 여러 부분 필요하다.&lt;/p&gt;

&lt;p&gt;해당 패키지 issues를 확인해보면, 최신 버전에 대한 이야기와 더이상 업데이트가 없냐는 이야기가 있을 정도이다. 해서 dev-develop 버전으로 사용하는 것으로 시작한다.&lt;/p&gt;

&lt;h4 id=&quot;1-1composerjson-파일에-패키지를-등록한다&quot;&gt;1-1.composer.json 파일에 패키지를 등록한다&lt;/h4&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;require&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;propel/propel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^2.0@alpha&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;propel/propel-laravel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dev-develop&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;minimum-stability&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;alpha&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;require부분에 사용할 propel과 propel provider가 포함된 propel-laravel을 추가해주고, 최소 사용가능 버전 설정을 위해 맨 아래에 minimum-stability 도 추가해 준다.&lt;/p&gt;

&lt;p&gt;그다음 composer를 업데이트 한다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;composer update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;1-2-laravel-service-provider-등록&quot;&gt;1-2. Laravel service provider 등록&lt;/h4&gt;
&lt;p&gt;기존에 문서에보면 GeneratorServiceProvider, RuntimeServiceProvider 를 등록하라고 나오는대, 업데이트된 버전에선 한개의 provider만 등록하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; app/config/app.php &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/
&lt;span class=&quot;s1&quot;&gt;'providers'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
...
Propel&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;ropelLaravel&lt;span class=&quot;se&quot;&gt;\P&lt;/span&gt;ropelIntegrationServiceProvider::class,
...
&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;1-3-propel-config-파일-복사&quot;&gt;1-3. propel config 파일 복사&lt;/h4&gt;
&lt;p&gt;터미널(혹은 콘솔) 에서 아래의 명령어를 입력하여 config을 복사&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php ./artisan vendor:publish &lt;span class=&quot;nt&quot;&gt;--provider&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Propel\PropelLaravel\RuntimeServiceProvider'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;단! 이 방법이 안될경우 아래의 명령어를 통해 cache초기화 등을 해준뒤 다시 진행해본다&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan config:cache
composer update
php artisan config:cache
php artisan vendor:publish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-설정&quot;&gt;2. 설정&lt;/h3&gt;
&lt;p&gt;설치가 다되었으면, 이제 Laravel을 설정하여 DB를 연결하고, 해당 DB테이블에 대한 schema.xml 파일을 추출한 뒤 해당 테이블과 매칭되는 모델을 propel 명령어로 생성한다.&lt;/p&gt;

&lt;h4 id=&quot;2-1-env설정&quot;&gt;2-1. env설정&lt;/h4&gt;
&lt;p&gt;laravel DB설정을 위해 상위폴더에 env파일을 열고, 자신의 환경에 맞게 DB를 설정한다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 나는 homestead 를 사용하기 때문에, 그에맞게 설정! &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/
...
&lt;span class=&quot;nv&quot;&gt;DB_CONNECTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysql
&lt;span class=&quot;nv&quot;&gt;DB_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;db.local
&lt;span class=&quot;nv&quot;&gt;DB_PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3306
&lt;span class=&quot;nv&quot;&gt;DB_DATABASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;homestead
&lt;span class=&quot;nv&quot;&gt;DB_USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;homestead
&lt;span class=&quot;nv&quot;&gt;DB_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;secret
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 env 파일이나 config 파일이 변경되면 clear 작업을 통해 새로 불러와야 한다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan config:clear
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-2-schemaxml-추출&quot;&gt;2-2. schema.xml 추출&lt;/h4&gt;
&lt;p&gt;만들어진 테이블을 기반으로 schema.xml을 뽑아 내도록 한다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan propel:database:reverse &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;데이터베이스 커넥션 명&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mysql,default&lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;여기서 사용되는 데이터베이스 커넥션 명은 따로 변경하지 않았으면 default, mysql 둘중 하나일 가능 성이 크다.&lt;/p&gt;

&lt;p&gt;커넥션명은 아까 복사한 config/propel.php 파일을 열어보면 connections안에 포함된 이름으로 확인 할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;2-3-schemaxml-파일-수정&quot;&gt;2-3. schema.xml 파일 수정&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;이부분은 사람마다, 상황마다 다르다. 필수가 아님!&lt;/em&gt;&lt;/strong&gt;
timestamp 컬럼에 데이터가 들어가는 시간을 자동으로 넣어 주는 부분과, 미리 모델을 만들때 namespace를 선언하기 위해 xml 파일을 수정한다&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
/* namespace=&quot;App\Models\&quot; 추가 */
&lt;span class=&quot;nt&quot;&gt;&amp;lt;database&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;default&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;defaultIdMethod=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;native&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;defaultPhpNamingMethod=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;underscore&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;namespace=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;App\Models\&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
...

/* timestamp 추가 */
...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;column&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user_id&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;phpName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UserId&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;INTEGER&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sqlType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;int(10) unsigned&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;behavior&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timestampable&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-4-model-생성&quot;&gt;2-4. model 생성&lt;/h4&gt;
&lt;p&gt;만들어진 schema.xml 기반의 내용으로 laravel 모델을 생성한다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan propel:model:build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2-5-테스트&quot;&gt;2-5. 테스트&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;php artisan tinker

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; App&lt;span class=&quot;se&quot;&gt;\M&lt;/span&gt;odels&lt;span class=&quot;se&quot;&gt;\B&lt;/span&gt;ase&lt;span class=&quot;se&quot;&gt;\U&lt;/span&gt;serQuery::create&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;-&amp;gt;find&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; Propel&lt;span class=&quot;se&quot;&gt;\R&lt;/span&gt;untime&lt;span class=&quot;se&quot;&gt;\C&lt;/span&gt;ollection&lt;span class=&quot;se&quot;&gt;\O&lt;/span&gt;bjectCollection &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#888}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-정리&quot;&gt;3. 정리&lt;/h3&gt;
&lt;p&gt;여기까지가 laravel 5.5에서 propel orm을 적용하는 방법이었다.
실제로 github 페이지 readme.md에서 변경된건&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;설치방법 (1-1)&lt;/li&gt;
  &lt;li&gt;provider 등록 (1-2)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;밖에 없다. 다만, laravel+propel 환경의 셋팅 자료도 잘없고,
나중에 필요할때 까먹지 않기 위해 정리해 보았다!&lt;/p&gt;
</description>
        <pubDate>Sat, 31 Mar 2018 05:30:21 +0900</pubDate>
        <link>http://localhost:4000/php/2018/03/31/laravel-propel.html</link>
        <guid isPermaLink="true">http://localhost:4000/php/2018/03/31/laravel-propel.html</guid>
        
        <category>php</category>
        
        <category>laravel</category>
        
        
        <category>php</category>
        
      </item>
    
      <item>
        <title>hexo 커맨드 정리 (포스트 작성,삭제,배포)</title>
        <description>&lt;p&gt;hexo를 설치하여 쓰다보니, 대부분 터미널에서 커맨드로 처리하다보니
자주 쓰는건 잊지 않게 정리해야 할 것 같아서 정리 한다.&lt;/p&gt;

&lt;h3 id=&quot;hexo-포스트-작성&quot;&gt;hexo 포스트 작성&lt;/h3&gt;
&lt;p&gt;포스트 작성하려면 터미널에서 &lt;strong&gt;hexo&lt;/strong&gt;를 이용해서 포스트 파일을 만든다&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hexo new post_name

&lt;span class=&quot;c&quot;&gt;# 만약 scaffold 를 이용하여 만들경우&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hexo new post &lt;span class=&quot;s2&quot;&gt;&quot;post_name&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 형태로 쓸수 있다. 그럼 scaffold에 post.md 파일 기반으로 새 포스트 파일을 만들어준다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그럼 파일은 아래의 경로에 생성된다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;/_post/post_name.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;해당 파일에 헤더부분을 수정하고, 내용을 작성한뒤 배포하면 된다.&lt;/p&gt;

&lt;h3 id=&quot;hexo-deploy를-이용한-배포&quot;&gt;hexo deploy를 이용한 배포&lt;/h3&gt;
&lt;p&gt;hexo 설정파일 (_config.yml)에 보면 deploy 설정이 있다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deploy:
  &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: git
  repo: 깃 주소
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 설정을 해두면 hexo를 통하여 배포 할 수 있다 (여기서 배포는 깃페이지에 글을 올릴수 있단 개념)
설정이 되어있다면 터미널에 아래의 명령어로 배포한다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    hexo clean
    hexo generate   &lt;span class=&quot;c&quot;&gt;# 동적 데이터로 변환&lt;/span&gt;
    hexo deploy     &lt;span class=&quot;c&quot;&gt;# 배포&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#아래의 명령어로 generate와 deploy를 한번에 할 수 있다.&lt;/span&gt;
    hexo deploy &lt;span class=&quot;nt&quot;&gt;--generate&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#아래의 명령어는 축약어라 생각 하면된다. 아래처럼 입력해도 된다.&lt;/span&gt;
    hexo g
    hexo d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;여기서 clean은 없어도 상관없지만, 오류가 생기는 경우가 있어서 항상 올리기전에 입력하고 있다.&lt;/p&gt;

&lt;h4 id=&quot;deploy를-이용하여-업로드-할때-오류가-난다면&quot;&gt;deploy를 이용하여 업로드 할때 오류가 난다면&lt;/h4&gt;
&lt;p&gt;나는 처음에 hexo deploy로 업로드할때 아래의 오류가 났었다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    ERROR Deployer not found: git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이럴땐 ‘hexo-deployer-git’ 플러그인을 설치하면 해결된다고 한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;hexo-deployer-git &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# 플러그인 설치&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# _config.yml 파일을 열어준뒤 아래의 구문을 추가한다.&lt;/span&gt;
    plugins:
        - hexo-deployer-git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;작성된-포스트-지우기&quot;&gt;작성된 포스트 지우기&lt;/h3&gt;
&lt;p&gt;포스트를 지울땐 생성할때와 동일한 &lt;strong&gt;source/_post/&lt;/strong&gt; 폴더로 접근해보면, 지울 포스트 파일이 보인다.
포스트파일을 제거한 뒤 clean ~ deploy 까지의 과정 (배포) 을 진행하면 포스트가 제거된 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;단, 포스트가 아예 없을경우 배포중 오류가 나는 경우가 있었다. 이부분 꼭 참고해야한다!&lt;/p&gt;

&lt;h3 id=&quot;참고-url&quot;&gt;참고 url&lt;/h3&gt;
&lt;p&gt;아래는 hexo를 설치하고, markdown문서를 작성하며 참고하였던 페이지들이다. 혹 문제가 된다면 알려주시면 삭제하겠습니다!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.holaxprogramming.com/2017/04/16/github-page-and-hexo/&quot;&gt;https://www.holaxprogramming.com/2017/04/16/github-page-and-hexo/&lt;/a&gt;
&lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;https://guides.github.com/features/mastering-markdown/&lt;/a&gt;
&lt;a href=&quot;https://steemit.com/kr/@nand/markdown&quot;&gt;https://steemit.com/kr/@nand/markdown&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Jan 2018 09:22:34 +0900</pubDate>
        <link>http://localhost:4000/etc/2018/01/02/hexo-command.html</link>
        <guid isPermaLink="true">http://localhost:4000/etc/2018/01/02/hexo-command.html</guid>
        
        <category>blog</category>
        
        <category>hexo</category>
        
        
        <category>etc</category>
        
      </item>
    
      <item>
        <title>2018년을 맞이하며 (회고보단 반성문)</title>
        <description>&lt;p&gt;git page를 설치하고, hexo를 설치하였다. 딱히 이유가 있어서 hexo를 설치한건 아니고 비교적은 익숙한 npm 기반이고 하여 설치해 보았다. 원래는 &lt;a href=&quot;http://blog.yozi.kr&quot;&gt;tistory&lt;/a&gt;를 사용하였다가 이걸 포기하고 이곳으로 넘어올 이유가 생겨서 오게 되었다.&lt;/p&gt;

&lt;h3 id=&quot;왜-git으로-오게-되었을까&quot;&gt;왜 git으로 오게 되었을까?&lt;/h3&gt;

&lt;p&gt;나름 개발자라고 열심히 준비하고 노력해온것 같다. 그러나 서울에 자주오면서 면접도 보고, 멋진 개발자분들을 많이 만나보면서 나는 여전히 우물안의 개구리란 느낌을 지울수가 없었다.
새로운 기술과 나은 방법에 대해 항상 생각해왔고, 다른 동료 개발자나 선배 개발자들에게 칭찬을 받으며 왔었지만 그건 그냥 그 위치의 시선에서의 의미가 아닐까 생각한다.&lt;/p&gt;

&lt;p&gt;회사에서 git을 사용 했었고, svn도 사용했었다. 다만 내가 사용했던것들이 얼마나 멋지고, 이게 이런 장점을 가진다 라고 설명할수 있을까? 면접활동을 하면서 그부분에 큰 오점이 있다고 생각했고, 가까운곳에서 부터 git을 사용하자고 생각했다.&lt;/p&gt;

&lt;p&gt;내 블로그를 git을 사용하여 조금이라도 가깝게, 나의 작업 내역을 좀더 자랑스럽게 공개해보자. 이게 가장 큰 부분인것 같다.&lt;/p&gt;

&lt;p&gt;그리고 tistory를 사용할땐 코드 삽입부분에서 &lt;strong&gt;아주아주아주아주아주&lt;/strong&gt; 많은 애를 먹었다. 아무리 외부 라이브러리를 추가해서 사용한들.. 힘든건 어쩔수 없었다.&lt;/p&gt;

&lt;p&gt;이번기회에 git page를 사용하게 되었고, 그와 동시에 2018년을 맞이하였다.&lt;/p&gt;

&lt;h3 id=&quot;2018년-맞이-하기전-돌아보자&quot;&gt;2018년 맞이 하기전, 돌아보자&lt;/h3&gt;

&lt;p&gt;2017년 12월 말, 쏟아지는 개발자분들의 회고록을 보았다. 그와 동시에 나를 되돌아 본 기회가 되었다.
나보다 경력이 낮거나, 혹은 나이가 아주 어린분들을 보며 내가 해온것들이 많이 부족했고, 그분들이 좋은환경에서 일을 하는건 당연하다고 생각했다.
그리고 내 한해를 돌아보기 시작했다. 난 정말 열심히 살아왔을까? 내가 생각 한만큼 이루어 왔을까?&lt;/p&gt;

&lt;p&gt;난 올해 초 회사를 나오고 프리랜서 팀으로 시작하였다.
프리랜서는 많은 경험이 될거라 생각했다. 내 경력에서 지금 프리랜서를 경험 해보는것, 그거 진짜 좋지않을까? 생각했다. 그리고 딱 2017년 1년은 해보자 생각했었다.&lt;/p&gt;

&lt;p&gt;역시 후회는 하지 않았지만 맘처럼 되진 않았다. 클라이언트를 만나고 일을 하고 마무리 지으면 또 작업준비하고… 하지만 여기서 문제는 예외상황을 너무 생각하지 못했단게 아닐까&lt;/p&gt;

&lt;h4 id=&quot;내가-생각한-그림&quot;&gt;내가 생각한 그림&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;외주를 하고 그 외 남은 시간은 회사를 다니며 하지못했던 공부를 한다.&lt;/li&gt;
  &lt;li&gt;외주하며 클라이언트를 상대한 것도 이직할때 좋은 장점이 되지않을까?&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;월급이 아니고 내가 한만큼의 프로젝트 수당이라니!!!?&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;공부, 많이 할수있었다. 새로운 솔루션도 써보았고, 새로운 언어도 접하였었다. 사실 여기에는 큰 단점이나 부정은 없다. 단지 내가 게을러지는 시간이 좀 있었지 않을까, 그게 제일 큰 문제였지 않을까 생각한다.&lt;/p&gt;

&lt;p&gt;그러나 ‘외주하며 클라이언트를 상대한 경험이 면접에 장점이 된다’ 이부분은 사실이 아니었던것 같다. 올해 서울쪽으로 면접을 보면서 큰회사 작은회사 다 가본것 같다. 하지만 이부분을 내새울 기회도, 궁금한 사람도 없었다. &lt;strong&gt;(지금 생각해보면 당연할 수 밖에 없었다. 난 개발자지 기술영업직이 아니니까!)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그리고 돈 버는 부분에 관한것..?
많이 벌때는 많이 벌었던것 같다. 그에 따라서 힘도 많이 들었었다. 끝날줄 모르는 요구사항 수정사항 반복반복 그 결과 밀려가는 일거리들에 받지못한 돈들 혹은 일을 더 받을수 없는 상태에 더 늘어날 리 없는 통장잔고..
문제는 이 반대의 상황이 더 괴로웠던것 같다. 일을 하고싶어도 못하는 비수기 같은 상황들이 생각보다 내 목을 조여온것 같다.
외주 업체끼리의 경쟁도 심하고, 그런 업체들끼리의 경쟁이 시장의 상태까지 악화 시키고 있었다.
그러다 보니 일을 하고싶어도 사람간의 경쟁이 심해지고 금액까지 후려치는 아무도 웃을수 없는 상황이 닥쳐왔다.&lt;/p&gt;

&lt;h3 id=&quot;그럼-2017년의-결론은&quot;&gt;그럼 2017년의 결론은..?&lt;/h3&gt;

&lt;p&gt;내가 위에 글을 쓸수 있는것, 이것또한 경험 없이 얻을수 없던 일이 아닌거 같다. 내가 말한 소중한 경험이 되어버렸다. 다시 하라면 할수 있다, 물론! 그땐 조금 고민을 많이 해봐야지.&lt;/p&gt;

&lt;p&gt;프리랜서 시장이 절대 나쁜건 아닌거같다 그러나 난 사람과의 대화가 필요했다.
&lt;strong&gt;좀 더 멋진 개발자분들은 어떤 준비를 해왔을까?&lt;/strong&gt;
&lt;strong&gt;그 개발자 분들이 작업하는 스타일은 어떤것 일까?&lt;/strong&gt;
&lt;strong&gt;내가 그 개발자분들과 작업하여 만들어낸 서비스들은 얼마나 멋질까?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;에이전시 작업이나 외주작업을 주로하고 회사에 있을땐 자체 서비스도 해오고 나니 난 내가 만든것들이 다른 사람이 쓰고 있고, 피드백을 받는게 행복했던것 같다.
그게 비록 성공하든, 못하든 그런것말고 누군가가 쓰고있고 그거 때문에 무언갈 느끼길 바랬던것 같다.&lt;/p&gt;

&lt;p&gt;그래서 2017년도는 면접도 보고있고 여전히 프리랜서 작업도 하고있다. 좋은개발자 분들과 작업할 기회가 있었기도 했다. 내가 너무 두렵거나, 자만감에 빠져있는 바람에 놓치기도 했다 &lt;strong&gt;(지금 생각했을땐 내가 정말 후회하고 있는것 같다)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;면접을 보고 짧게는 30분 길게는 1시간씩 공격과 방어, 혹은 대화를 나누어가며 많은 느낌을 받았다. 내가 부족하다고 느낀것 보다, 내가 뛰던 트랙들이 잘못된 트랙인것 같다고 느꼈다.
modern php에 좀더 관심가지고, 익숙했던 방법 말고 아름답고, 멋진 방법을 사용하기로 했다.
토이프로젝트도 (늘 좋아했던거고 고민해 왔던거니까!), git의 익숙함도 키우고 작지만 멋진 목표들을 이뤄가려 한다.&lt;/p&gt;

&lt;h3 id=&quot;진짜-결론&quot;&gt;진짜 결론&lt;/h3&gt;

&lt;p&gt;지금 1월 1일에 쓰는 이글이후에 아마 목표나 계획이 더 추가되고 혹은 수정되지 않을까 싶지만 일단 결론은!&lt;/p&gt;

&lt;h4 id=&quot;2017년-마무리&quot;&gt;2017년 마무리&lt;/h4&gt;
&lt;p&gt;즐거웠다. 많은 경험이었고, 많은걸 깨달았다.
곧 멋진 사람들과 멋진걸 만들고,
내 활동이 다양한 사람들에게 또 영향이 왔으면 좋겠다.&lt;/p&gt;

&lt;h4 id=&quot;2018년의-시작&quot;&gt;2018년의 시작&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;1일 1커밋에 대한 최소한의 노력
    &lt;ul&gt;
      &lt;li&gt;git에 익숙해지기 위해 1일 1커밋은 아니더라도,7일중 5일은 할 수 있으면 좋지 않을까?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;오픈소스에 대한 투자
    &lt;ul&gt;
      &lt;li&gt;만들어진 오픈소스에 내 똥손을 투척할 순 없지만, 내 소스를 공개할 수 있으면 좋겠다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;알고리즘, 자료구조의 두려움에서 극복
    &lt;ul&gt;
      &lt;li&gt;엄청 무서워한다. 면접 볼때마다 긴장을 어찌나 하는지.. 극복하고 싶다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;기본기에 대해 다시 쌓아가기
    &lt;ul&gt;
      &lt;li&gt;부족했던 내 기본기에 대해 다시 쌓고 당당해지고 싶다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;토이프로젝트 진행
    &lt;ul&gt;
      &lt;li&gt;원래 토이프로젝트를 굉장히 좋아했다. 자잘한걸 만들고 필요없다고 혼자 쓰다버리고..&lt;/li&gt;
      &lt;li&gt;이번엔 쓰던 안쓰던 공개 해야겠다! 다양한 언어보다 깊이있는 개발을 해보고 싶으니까!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;내 한해 빛났다 (빛 났었다고 생각한다.)
잘했었고, 잘할것이고, 내코드가 혹은 내자신이 더 멋지고 더 아름답게
마무리 될수 있게 시작한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;새해 복 많이 받으세요!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Jan 2018 07:35:55 +0900</pubDate>
        <link>http://localhost:4000/log/2018/01/02/first-posting.html</link>
        <guid isPermaLink="true">http://localhost:4000/log/2018/01/02/first-posting.html</guid>
        
        <category>회고록</category>
        
        
        <category>log</category>
        
      </item>
    
  </channel>
</rss>
